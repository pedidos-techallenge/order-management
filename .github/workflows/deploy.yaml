name: Deploy to EKS with Terraform

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      job_name:
        description: 'Job para executar (CI, mongodb-atlas, deploy-application)'
        required: true
        type: choice
        options:
          - CI
          - mongodb-atlas
          - deploy-application
          - all

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
  AWS_DEFAULT_REGION: us-east-1
  EKS_CLUSTER_NAME: techchallenge-eks-cluster
  ECR_REPOSITORY: techchallenge-ecr
  MONGODB_URI: ${{ secrets.MONGODB_URI }}
  MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
  MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
  SQS_MAIN_QUEUE_URL: ${{ secrets.SQS_MAIN_QUEUE_URL }}
  SQS_DLQ_URL: ${{ secrets.SQS_DLQ_URL }}
  IMAGE_TAG: ${{ github.sha }}


jobs:
  CI:
    name: CI Pipeline
    if: github.event_name == 'push' || github.event.inputs.job_name == 'CI' || github.event.inputs.job_name == 'all'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Maven
        if: github.actor == 'nektos/act'
        run: |
          apt-get update
          apt-get install -y maven

      - name: Run Tests and Coverage
        run: mvn clean verify -Pcoverage

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: application
          path: target/*.jar

      - name: Prepare Docker Build Context
        # Baixa o JAR e coloca no diretório esperado para o Docker
        uses: actions/download-artifact@v4
        with:
          name: application
          run: mv application/*.jar target/app.jar

      - name: Verify JAR for Docker Build
        # Verifica se o JAR foi corretamente preparado
        run: ls -la target/

      - name: Build Docker Image
        # Constrói a imagem Docker usando o arquivo app.jar no local correto
        run: docker build --no-cache . -t order-management

      - name: SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Pcoverage \
            -DskipTests \
            -Dsonar.projectKey=pedidos-techallenge_order-management \
            -Dsonar.organization=pedidos-techallenge \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.java.coveragePlugin=jacoco \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.java.test.binaries=target/test-classes \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.test.inclusions=**/*Test.java \
            -Dsonar.core.codeCoveragePlugin=jacoco \
            -Dsonar.verbose=true \
            -Dsonar.branch.name=main \
            -Dsonar.scm.provider=git

  mongodb-atlas:
    needs: CI
    if: github.event_name == 'push' || github.event.inputs.job_name == 'mongodb-atlas' || github.event.inputs.job_name == 'all'
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: "true"
    outputs:
      mongodb_uri: ${{ steps.get_mongodb_uri.outputs.mongodb_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Terraform
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install terraform

      - name: Create tfvars file
        working-directory: ./infrastructure/terraform
        run: |
          cat > terraform.tfvars << EOF
          mongodb_username         = "${{ secrets.MONGODB_USERNAME }}"
          mongodb_password         = "${{ secrets.MONGODB_PASSWORD }}"
          mongodb_atlas_org_id     = "${{ secrets.MONGODB_ATLAS_ORG_ID }}"
          mongodb_atlas_public_key  = "${{ secrets.MONGODB_ATLAS_PUBLIC_KEY }}"
          mongodb_atlas_private_key = "${{ secrets.MONGODB_ATLAS_PRIVATE_KEY }}"
          local_ip                 = "${{ secrets.LOCAL_IP }}"
          EOF

      - name: Initialize Terraform for MongoDB
        working-directory: ./infrastructure/terraform
        run: terraform init -input=false -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=mongodb.tfstate" -backend-config="region=us-east-1"

      - name: Plan Terraform changes for MongoDB
        working-directory: ./infrastructure/terraform
        run: terraform plan -input=false -out=tfplan

      - name: Apply Terraform changes for MongoDB
        working-directory: ./infrastructure/terraform
        run: terraform apply -input=false -auto-approve tfplan

      - name: Wait for MongoDB Cluster and Get URI
        id: get_mongodb_uri
        run: |
          # Usar a string de conexão diretamente das secrets
          CONN_STRING="${{ secrets.MONGODB_URI }}"
          
          # Debug (mascarando senha)
          echo "Connection string format: $(echo ${CONN_STRING} | sed 's/:[^@]*@/:*****@/')"
          
          # Exportar a URI formatada
          echo "mongodb_uri=${CONN_STRING}" >> $GITHUB_OUTPUT

  deploy-application:
    needs: [CI, mongodb-atlas]
    if: github.event_name == 'push' || github.event.inputs.job_name == 'deploy-application' || github.event.inputs.job_name == 'all'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          rm awscliv2.zip
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Update kube config
        run: aws eks update-kubeconfig --name techchallenge-eks-cluster --region us-east-1

      - name: Create Secret manifest
        env:
          MONGODB_URI: ${{ needs.mongodb-atlas.outputs.mongodb_uri }}
        run: |
          kubectl create secret generic order-management-secrets \
            --from-literal=MONGODB_URI="${MONGODB_URI}" \
            --from-literal=AWS_ACCESS_KEY_ID="${{ env.AWS_ACCESS_KEY_ID }}" \
            --from-literal=AWS_SECRET_ACCESS_KEY="${{ env.AWS_SECRET_ACCESS_KEY }}" \
            --from-literal=AWS_SESSION_TOKEN="${{ env.AWS_SESSION_TOKEN }}" \
            --from-literal=SQS_MAIN_QUEUE_URL="${{ env.SQS_MAIN_QUEUE_URL }}" \
            --from-literal=SQS_DLQ_URL="${{ env.SQS_DLQ_URL }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create ConfigMap
        run: |
          kubectl create configmap app-config \
            --from-literal=APP_NAME="Tech Challenge" \
            --from-literal=APP_PORT="8080" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create JWT Secret
        run: |
          kubectl create secret generic jwt-secret \
            --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Install envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: Build image
        run: |
          # Obter o URI do repositório ECR primeiro
          ECR_REGISTRY=$(aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} --query 'repositories[0].repositoryUri' --output text)
          echo "ECR_REGISTRY=${ECR_REGISTRY}" >> $GITHUB_ENV
          
          # Build com nome completo da imagem
          docker build -t ${ECR_REGISTRY}:${IMAGE_TAG} .
          
          # Debug
          echo "Built image: ${ECR_REGISTRY}:${IMAGE_TAG}"
          docker images

      - name: Login to Amazon ECR
        run: |
          # Login no ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}

      - name: Push image to ECR
        run: |
          # Push da imagem
          docker push ${ECR_REGISTRY}:${IMAGE_TAG}

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Debug das variáveis
          echo "ECR_REGISTRY: ${ECR_REGISTRY}"
          echo "IMAGE_TAG: ${IMAGE_TAG}"
          
          # Remover deployment anterior se existir
          kubectl delete deployment order-management --ignore-not-found
          
          # Substituir variáveis no arquivo deployment
          envsubst < infrastructure/kubernetes/deployment.yaml > deployment_updated.yaml
          
          # Aplicar os manifestos
          kubectl apply -f deployment_updated.yaml
          kubectl apply -f infrastructure/kubernetes/service.yaml
          
          # Aguardar o deployment
          kubectl rollout status deployment/order-management --timeout=180s
          
          # Debug dos pods
          echo "Pod status:"
          kubectl get pods -l app=order-management -o wide
          
          # Se houver erro, mostrar logs
          POD_NAME=$(kubectl get pods -l app=order-management -o jsonpath="{.items[0].metadata.name}")
          echo "Pod logs:"
          kubectl logs $POD_NAME
